{"version":3,"sources":["seed-completo-real.js"],"names":["mongoose","require","bcrypt","process","env","MONGODB_URI","seedDatabase","proveedorSchema","tipoProductoSchema","materialSchema","productoSchema","clienteSchema","grupoSchema","cotizacionSchema","cotizacionItemSchema","reparacionSchema","userSchema","Proveedor","TipoProducto","Material","Producto","Cliente","Grupo","Cotizacion","CotizacionItem","Reparacion","User","hashedPassword","users","proveedores","tiposProducto","materiales","productos","reparaciones","clientes","cotizacion","grupos","items","subtotal","impuestos","total","regeneratorRuntime","async","_context","prev","next","console","log","awrap","Schema","nombre","String","telefono","email","direccion","ciudad","tipoMateriales","Number","pais","descuentoGeneral","estado","mano_obra_fabricacion","timestamps","Boolean","mano_obra_instalacion","descripcion","unidad","categoria","Types","ObjectId","costo","stock","stockMinimo","proveedor_id","contribuyeMalla","costo_adicional","codigo","identificador","tipo_producto_id","user_id","imagen","svg","margen_ganancia","material_id","formula","orden","numero","fecha_vencimiento","notas","cotizacion_id","grupo_id","tipo","producto_id","ancho","alto","malla","color_aluminio","color_pvc","tipo_vidrio","precio_unitario","precio_base","name","password","role","isActive","models","deleteMany","model","hash","sent","insertMany","length","contacto","_id","variantes","tiempo_estimado","concat","create","Date","now","cliente_id","cantidad","reduce","sum","item","updateOne","t0","finish","stop"],"mappings":"aAAA,IAAMA,SAAWC,QAAQ,YACnBC,OAASD,QAAQ,YAAjBC,YAAgBC,QAACC,IAAvBC,aAEA,uCAGA,SAAeC,eAAf,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAEIE,QAAQC,IAAI,8BAFhBJ,EAAAE,KAAA,EAAAJ,mBAAAO,MAAe1C,SAAAA,QAAfD,cAAA,KAAA,EAAA,OAAAyC,QAAAC,IAAA,yBAAAxC,EAAA,IAAAP,SAAAiD,OAAA,CAAAC,OAAAC,OAEIL,SAAQC,OAFZK,SAAAD,OAAAE,MAAAF,OAaQG,UAAWH,OAbnBI,OAAAJ,OAIIL,KAAAA,OAYIU,eAAgB,CAACL,QATf5C,iBAPVkD,OASQP,OAAAA,SAEAE,CAAAA,YAAQ,IAGRG,EANF,IAAAvD,SAAAiD,OAOES,CACAF,OAAAA,OACAG,YAAAA,OACAC,UAAMT,OAVRU,sBAYAJ,OAAEK,sBAAYL,OAAdG,OApBNG,SAyBQb,CAAAA,YAAQC,IAGRU,EAAAA,IAAAA,SAAuBJ,OACvBO,CACAJ,OAAAA,OANFK,YAQAd,OAAEW,UAAAA,OAAFI,OAhCNf,OAmCU1C,MAAAA,OAEFyC,MAAAA,OACAe,YAAAA,OACAE,aAASnE,SAHXiD,OAAAmB,MAAAC,SAIEH,gBAAQf,QACRmB,OAAAA,QACAC,UAAOd,CACPe,CACAC,KAAAA,OACAC,OAAAA,OACAd,gBAVFH,UAeMkB,CAAAA,YAAAA,IAIJb,EAAY,IAAA9D,SAAAiD,OAAd,CAGIvC,OAAAA,OAEFwC,OAAAA,OACA0B,cAAQzB,OACR0B,YAAAA,OACAZ,iBAAad,SAJfF,OAAAmB,MAAAC,SAKES,QAAAA,SAAAA,OAAkB9E,MAASiD,SAC3B8B,OAAAA,OACAC,IAAAA,OACAC,aAAK9B,SARPF,OAAAmB,MAAAC,SASEI,gBAAYhB,OACZyB,OAAAA,QACAtB,WAAQG,CACRhC,CAEIoD,YAAWnF,SAAEA,OAASiD,MAAOmB,SAC7BgB,QAAOjC,UAIb,CAAAW,YA9EN,IAoFQT,EAFF,IAAArD,SAAAiD,OAGEG,CACAE,OAAAA,OACAC,MAAAA,OACAK,SAAMT,OANRG,UAQAH,OAAEW,OAAAA,OAAFF,OA1FNG,SA+FQb,CAAAA,YAAQC,IAGRkC,EAAO5B,IAAAA,SAAAA,OAJT,CAMEK,OAAAA,OAAFG,YApGNd,OAuGUtC,cAAAA,SAAmBoC,OAAIjD,MAASiD,SAElCqC,MAAAA,QAEAP,CAAAA,YAAO,IAGPvC,EANF,IAAAxC,SAAAiD,OAOEW,CACA2B,OAAAA,OACAC,WAAOrC,SAAAA,OAAAA,MAAAA,SATT4B,QAWA/E,SAAAiD,OAAAmB,MAAAC,SAAEP,SAAAA,OAAFvB,UAnHNkB,OAsHU3C,MAAAA,OAEF2E,OAAAA,OACAC,kBAAU1F,KACV2F,MAAAA,QACAC,CAAAA,YAAAA,IAGAC,EAPF,IAAA7F,SAAAiD,OAQE6C,CACAC,cAAOhC,SATTd,OAAAmB,MAAAC,SAUE2B,SAAAA,SAAc/C,OAVhBmB,MAAAC,SAWE4B,KAAAA,OACAC,YAAAA,SAAa/C,OAZfiB,MAAAC,SAaE8B,YAAAA,OACA7D,SAAAA,OACA0C,MAAAA,OACAK,KAAAA,OAhBFU,MAkBAhC,QAAED,eAAYX,OAAd8C,UAzIN9C,OA4IUpC,YAAAA,OAEFmC,gBAAQC,OACRc,SAAAA,OACAE,OAAAA,OACAiC,MAAAA,QAEAxC,CAAAA,YAAQG,IAEVhD,EArJN,IAAAf,SAAAiD,OAwJUjC,CAEFqF,OAAIlD,OACJE,YAAOF,OACPmD,UAAAA,OACAC,YAAMpD,OACNqD,gBAAUzC,OALZH,OAOAG,SAAA,CAAAD,YAGF,IAEM5C,EArKV,IAqKyBlB,SAASyG,OACxBtF,CACAC,KAAAA,OACAC,MAAAA,OACAC,SAAQtB,OACRuB,KAAAA,OACAC,SAAAA,SAEAE,CAAAA,YAAO1B,IA7KjBiB,EAAAjB,SAAAyG,OAAAxF,WAiLmBjB,SAAC0G,MAjLpB,YAAAnG,GAqKUW,EAAelB,SAASyG,OAAOvF,cAAgBlB,SAAS2G,MAAM,eAAgBnG,GArKxFW,EAAAnB,SAAAyG,OAAAtF,UAAAnB,SAAA2G,MAAA,WAAAlG,GAAAW,EAAApB,SAAAyG,OAAArF,UAAApB,SAAA2G,MAAA,WAAAjG,GAAAW,EAAArB,SAAAyG,OAAApF,SAkLUH,SAAawF,MAAAA,UAlLvB/F,GAyKUW,EAAQtB,SAASyG,OAAOnF,OAAStB,SAAS2G,MAAM,QAAS/F,GAzKnEW,EAAAvB,SAAAyG,OAAAlF,YAAAvB,SAAA2G,MAAA,aAAA9F,GAAAW,EAAAxB,SAAAyG,OAAAjF,gBAAAxB,SAAA2G,MAAA,iBAAA7F,GAAAW,EAAAzB,SAAAyG,OAAAhF,YAmLmBiF,SAAWC,MAnL9B,aAAA5F,GA6KUW,EAAO1B,SAASyG,OAAO/E,MAAQ1B,SAAS2G,MAAM,OAAQ3F,GA7KhE8B,QAAAC,IAAA,oCAAAJ,EAAAE,KAAA,GAAAJ,mBAAAO,MAiLU/B,EAAUyF,WAAW,KAjL/B,KAAA,GAAA,OAAA/D,EAAAE,KAAA,GAAAJ,mBAAAO,MAAA9B,EAAAwF,WAAA,KAAA,KAAA,GAAA,OAAA/D,EAAAE,KAAA,GAAAJ,mBAAAO,MAAA7B,EAAAuF,WAAA,KAAA,KAAA,GAAA,OAAA/D,EAAAE,KAAA,GAAAJ,mBAAAO,MAAA5B,EAAAsF,WAAA,KAAA,KAAA,GAAA,OAAA/D,EAAAE,KAAA,GAAAJ,mBAAAO,MAqLU3B,EAAQqF,WAAW,KArL7B,KAAA,GAAA,OAAA/D,EAAAE,KAAA,GAAAJ,mBAAAO,MAAA1B,EAAAoF,WAAA,KAAA,KAAA,GAAA,OAAA/D,EAAAE,KAAA,GAAAJ,mBAAAO,MAAAzB,EAAAmF,WAAA,KAAA,KAAA,GAAA,OAAA/D,EAAAE,KAAA,GAAAJ,mBAAAO,MAAAxB,EAAAkF,WAAA,KAAA,KAAA,GAAA,OAAA/D,EAAAE,KAAA,GAAAJ,mBAAAO,MAyLUvB,EAAWiF,WAAW,KAzLhC,KAAA,GAAA,OAAA/D,EAAAE,KAAA,GAAAJ,mBAAAO,MAAAtB,EAAAgF,WAAA,KAAA,KAAA,GAAA,OA6LI5D,QAAQC,IAAI,0BA7LhBJ,EAAAE,KAAA,GAAAJ,mBAAAO,MAAA9C,OAAA0G,KAAA,WAAA,KAAA,KAAA,GAAA,OAAAjF,EAAAgB,EAAAkE,KAAAlE,EAAAE,KAAA,GAAAJ,mBAAAO,MAAAtB,EAAAoF,WAAA,CAiMM,CAjMNT,KAAA,gBAAAhD,MAAA,iBAAAiD,SAAA3E,EAqMQ4E,KAAM,QArMdC,UAAA,GAAA,CAyMQH,KAAM,WAzMdhD,MAAA,oBA4LIiD,SAAA3E,EACAmB,KAAAA,WA7LJ0D,UAAA,MAAA,KAAA,GAAA,OAAA5E,EAAAe,EAAAkE,KA8LUlF,QAAAA,IAAAA,KAAAA,OAAAA,EA9LVoF,OA8LUpF,sBAIF0E,QAAAA,IAAI,6BAlMZ1D,EAAAE,KAAA,GAAAJ,mBAAAO,MAmMe/B,EAFT6F,WAAA,CAGER,CACAC,OAAI,SACJC,SAAAA,aALFpD,SAOA,WACEiD,MAAAA,sBACAhD,UAAO,qBACPiD,OAAAA,cACAC,KAAAA,SACAC,eAAU,CAAA,WAAA,UALZ7C,iBAxMN,EAgOQC,QAAQ,GAhCNhC,CAiBNkB,OAAAA,QAmBIkE,SAAU,eAhBdlE,SAAQC,WApNZM,MAAA,mBAAAC,UAAA,oBAuNQJ,OAAAA,YACA8D,KAAAA,SACA5D,eAAU,CAAA,SAHZ,WAIEC,iBAAO,EACPC,QAAAA,GAEAI,CACAF,OAAAA,cACAG,SAAAA,mBACAC,SAAM,WAVRP,MAYA,sBACEH,UAAM,sBACN8D,OAAAA,mBACA5D,KAAAA,SACAC,eAAO,CAAA,WAJT,cAKEC,iBAAW,EACXC,QAAAA,MAxOR,KAAA,GAAA,OAmMQF,EAnMRV,EAAAkE,KA4OQjD,QAAAA,IAAAA,KAAAA,OAAQ/B,EAAAkF,OAARnD,yBAIAoD,QAAAA,IAAAA,mCAhPRrE,EAAAE,KAAA,GAAAJ,mBAAAO,MA8OM9B,EAAA4F,WAAA,CAIEzD,CACAC,OAAAA,cACAC,YAAQ,iDACRG,UAAM,WACNF,sBAAiB,IACjBG,sBATF,IAUEC,QAAAA,GAiBF,CAzQNV,OAAA,mBAqNUrB,YArNV,sDA4PIiB,UAAQC,WAiBJc,sBAAuB,IAd3Bf,sBAAY,IA/PhBc,QAAA,GAkQQV,CACAe,OAAAA,aACAE,YAAS,gDACTN,UAAAA,UACAG,sBAAAA,IACAJ,sBAAQ,IANVA,QAQA,GAEEK,CACAE,OAAAA,kBACAN,YAAAA,4DACAG,UAAAA,oBACAJ,sBAAQ,IANVI,sBAQA,IACEd,QAAAA,MAlRR,KAAA,GAAA,OAiPQE,EAjPRT,EAAAkE,KAsRQ7C,QAAAA,IAAAA,KAAAA,OAAAA,EAAuB+C,OAAvB/C,+BAIAd,QAAAA,IAAAA,4BA1RRP,EAAAE,KAAA,GAAAJ,mBAAAO,MA2RqB7B,EAAA2F,WAAA,CACb3C,CACAN,OAAAA,qBACAG,YAAAA,wCACAJ,UAAM,MANRM,OAzRN,KA6SQI,MAAO,KA7SfC,MAAA,IAgQUzC,YAAAA,IAmCNgB,aAAAjB,EAAA,GAAAoF,IAcIvC,iBAAiB,EAXrB5B,QAAAA,EAtSJoE,UAAA,CAAA,CAAAvB,KAAA,YAAAzC,OAAA,SAuS6B/B,gBACvB,GACE+B,CAAAA,KAAM,YAAEA,OAAA,OADVyB,gBAAA,GAEEV,CAAAA,KAAAA,YAAaf,OAAA,QAAAyB,gBAFf,KAKEL,CACAC,OAAAA,0BACAC,YAAAA,6CACAC,UAAAA,WACAC,OAAAA,KACAd,MAAAA,GACAsD,MAAAA,IACIvB,YAAM,GAAazC,aAAQrB,EAA7B,GAAAoF,IAAuCtC,iBAAAA,EAAvCf,QACA,EAAE+B,UAAI,CAAezC,CAAAA,KAAAA,iBAArBA,OAAA,UAAAyB,gBAAA,GAAqCA,CAAAA,KAAAA,iBAAiBzB,OAAA,SAAAyB,gBAAA,IAAtD,CAAAgB,KACA,iBAAAzC,OAAA,QAAAyB,gBAAA,MAAsCA,CAAtCzB,OAHS,mBAXbe,YAiBA,wCACEf,UAAM,SACNe,OAAAA,KACAE,MAAAA,IACAD,MAAAA,IACAI,YAAO,GACPC,aANF1C,EAAA,GAAAoF,IAOEzC,iBAAa,EACbC,QAAAA,EACAC,UAAAA,CACAd,CAAAA,KAAM,cAVRV,OAAA,QAAAyB,gBAAA,GAWEuC,CAAAA,KAAAA,cACEhE,OAAA,SAAAyB,gBAAA,IAAEgB,CAAAA,KAAI,cAAEzC,OAAR,OAAAyB,gBAAA,MAAA,CACEgB,OAAAA,uBAAwBzC,YAAM,0CAAYyB,UAAAA,kBAA5CT,OACA,KAAEyB,MAAAA,IAAwBzC,MAAAA,IAAiByB,YAAAA,GAA3CF,aAHS5C,EAAA,GAAAoF,IAXbvC,iBAiBA,EACExB,QAAAA,EACAe,UAAAA,CACAE,CAAAA,KAAAA,cAHFjB,OAAA,QAAAyB,gBAAA,GAIET,CAAAA,KAAM,cAJRhB,OAAA,aAAAyB,gBAAA,KAKEL,CAAAA,KAAK,cALPpB,OAAA,WAAAyB,gBAAA,OAQEF,CACAC,OAAAA,wBACAd,YAAQ,mDACRsD,UAAAA,WACIvB,OAAAA,QAAqBzC,MAAAA,IAAiByB,MAAAA,GAAxCH,YACA,EAAEmB,aAAM9D,EAAR,GAAAoF,IAAuB/D,iBAAQ,EAAUyB,QAAAA,EAAzCuC,UACA,CAAEvB,CAAAA,KAAI,OAAEzC,OAAR,mBAAAyB,gBAAA,GAAuBzB,CAAAA,KAAAA,OAAQA,OAA/B,UAAAyB,gBAAA,OAdJ,CAkBEzB,OAAAA,mBACAe,YAAAA,yBACAE,UAAAA,aACAD,OAAAA,KACAI,MAAAA,GACAC,MAAAA,IACAC,YAAAA,GACAC,aAAAA,EAAc5C,GAAWoF,IACzBvC,iBAAAA,EACAd,QAAAA,EACAsD,UAAAA,CACIvB,CAAAA,KAAI,OAAEzC,OAAR,WAAAyB,gBAAA,GAAuBzB,CAAAA,KAAAA,OAAQA,OAA/B,YAAAyB,gBAAA,QAvWV,KAAA,GAAA,OA2RQV,EA3RRtB,EAAAkE,KAwWuDlC,QAAAA,IAAAA,KAAAA,OAAAA,EAAiBoC,OAAjBpC,wBACtBzB,QAAAA,IAAAA,4BAzWjCP,EAAAE,KAAA,GAAAJ,mBAAAO,MAyWqD2B,EAAiBmC,WAAA,CAA5D,CAdJ5D,OAiBA,sBACEA,OAAAA,WACAe,cAAW,aACXE,YAAS,wCACTD,iBAAQpC,EAJV,GAAAmF,IAKE3C,QAAK1C,EAAE,GALTqF,IAME1C,OAAAA,wCACAC,IAAAA,mFACAC,aAAAA,EAAc5C,GAAWoF,IACzBvC,gBAAAA,GACAd,QAAAA,EACAsD,WAAAA,CACIvB,CAAczC,YAAQnB,EAAA,GAAAkF,IAAoBtC,QAAAA,sDAC1CgB,CAAczC,YAAQnB,EAAxB,GAAAkF,IAAmCtC,QAAAA,4CAbvC,CAiBEzB,YAAQnB,EAAA,GADVkF,IAEEhD,QAAAA,gEAIAM,CACAC,OAAAA,2BACAC,OAAAA,WACAC,cAAAA,aACAd,YAAQ,6CACRsD,iBACEpF,EAAA,GAAAmF,IAAEtB,QAAAA,EAAM,GAARsB,IAAgB/D,OAAAA,wCAAoByB,IAAAA,mFAApCF,aACA5C,EAAA,GAAAoF,IAAEtB,gBAAM,GAAQzC,QAAAA,EAAqByB,WAAAA,CAArC,CAlGmBQ,YAvS7BpD,EAAA,GAAAkF,IA6bY7B,QAAS,wDAtJXrD,CAuGNe,YAAAf,EAAA,GAAiBA,IAmDTqD,QAAS,8CA7CblC,CACA0B,OAAAA,sBACAC,OAAAA,WACAZ,cAAW,YACXa,YAAAA,oCACAC,iBAAcjD,EANhB,GAAAmF,IAOEjC,QAAAA,EAAQ,GAAAiC,IACRhC,OAAG,wCACHR,IAAAA,mFACAS,aAAAA,EAVF,GAAA+B,IAWErD,gBAXF,GAYE7B,QAAAA,EAEIoD,WAAAA,CACAC,CAFFD,YAIApD,EAAA,GAAAkF,IACE9B,QAAAA,wDADF,CAKEA,YAAWpD,EAAEA,GAAUkF,IACvB7B,QAAO,oDAMXR,CACAC,OAAAA,2BACAZ,OAAAA,WACAa,cAAAA,SACAC,YAASnD,2CACToD,iBAAQlD,EAAA,GAAAmF,IACRhC,QAAKrD,EAAA,GAAAqF,IACLxC,OAAAA,wCACAS,IAAAA,mFACAtB,aAAQ/B,EAXV,GAAAoF,IAYElF,gBACE,GACEoD,QAAAA,EACAC,WAAAA,CAFF,CAKED,YAAWpD,EAAEA,GAAUkF,IACvB7B,QAAO,4CAnBb,CAwBElC,YAAQnB,EAAA,GAAAkF,IACRrC,QAAQ,4CAvchB,KAAA,GAAA,OAyWqDD,EAzWrDhC,EAAAkE,KA6cQ5B,QAAAA,IAAAA,KAAAA,OAAKjD,EAAA+E,OAAL9B,uBAGArB,QAAAA,IAAAA,8BAhdRjB,EAAAE,KAAA,GAAAJ,mBAAAO,MAkdUvB,EAAAqF,WAAA,CACE3B,CACAC,OAAAA,mBAFFnB,YAIA,6CACEkB,UAAAA,qBACAC,YAAO,IAFT+B,gBALU,EAZdvD,QAuBA,GAEEgB,CACAC,OAAAA,qBACAZ,YAAAA,yDACAa,UAAAA,sBACAC,YAASnD,IACToD,gBAAQ,EACRC,QAAG,GAEHC,CACAtB,OAAAA,0BACA7B,YAAAA,wDAEIoD,UAAAA,qBACAC,YAAO,IAFT+B,gBAIA,IACEhC,QAAAA,MA9eZ,KAAA,GAAA,OAidQpD,EAjdRY,EAAAkE,KAohBI/D,QAAQC,IAAR,KAAAqE,OAAiBnF,EAAa8E,OAA9B,0BA/BAjE,QAAAA,IAAAA,0BArfJH,EAAAE,KAAA,GAAAJ,mBAAAO,MAwhB2B3B,EAAQyF,WAAW,CAhC1ChE,CAxfJI,OAAA,aAAAG,MAAA,mBA2fQH,SAAM,WACNe,UAAAA,sBACAE,OAAAA,mBACAiC,QAAAA,GAEAxC,CANFV,OAQA,0BACEA,MAAAA,mCACAe,SAAAA,WACAE,UAAAA,kBACAiC,OAAAA,cACAe,QAAAA,GALF,CASEjE,OAAAA,iBACAe,MAAAA,oBACAE,SAAAA,WACAiC,UAAAA,uBACAe,OAAAA,YACAvD,QAAAA,MAhhBR,KAAA,GAAA,OAwhBU1B,EAxhBVS,EAAAkE,KAyfU5E,QAAAA,IAAAA,KAAAA,OAAAA,EAzfV8E,OAyfU9E,sBA8BNa,QAAAA,IAAAA,uCAvhBJH,EAAAE,KAAA,GAAAJ,mBAAAO,MAAAzB,EAAA8F,OAAA,CAAA/B,OAAA,eA0hBQpC,WAAMhB,EAAE,GAAA+E,IACR5D,QAAAA,EAAO,GAAA4D,IACP7D,SAAAA,EACAE,UAAAA,EACAC,MAAAA,EACAK,OAAAA,WANF2B,kBAQA,IAAA+B,KAAAA,KAAAC,MAAA,QACErE,MAAAA,4DAliBR,KAAA,GAAA,OAAAf,EAAAQ,EAAAkE,KAsiBQtD,QAAAA,IAAAA,wBAtiBRZ,EAAAE,KAAA,GAAAJ,mBAAAO,MAuiBgB1B,EAAAwF,WAAA,CANV,CASE5D,OAAAA,oBACAG,YAAO,sCACPD,cAAUjB,EAHZ8E,IAIE3D,MAAAA,GAEAM,CANFV,OAziBN,uBA8kBQe,YAAa,+CA9kBrBwB,cAAAtD,EAAA8E,IAwhBU/E,MAAAA,MAxhBV,KAAA,GAAA,OAuiBQ0B,EAviBRjB,EAAAkE,KAAA/D,QAAAC,IAAA,KAAAqE,OAAAhF,EAAA2E,OAAA,oBAyjBMS,QAAAA,IAAAA,qCAzjBN7E,EAAAE,KAAA,GAAAJ,mBAAAO,MA0jBepB,EAHgCkF,WAAA,CAIzCxE,CACAC,cAAWJ,EAL8B8E,IAMzCzE,SAAKJ,EANoC,GAAA6E,IAOzCrD,KAAAA,WACA2B,YAAAA,EAAmB,GAAA0B,IACnBzB,YAAO,gCATkCiC,SAvjB/C,EAgmBQ5B,MAAO,IAhmBfC,KAAA,IAujBU3D,OAAAA,EAYN8D,UAAA,SACAnD,gBAAY,KApkBhBR,SAAA,IAAA0C,OAAA,wCAukBQ9B,MAAAA,GAEAuC,CACAJ,cAAOlD,EAAA8E,IAJTvB,SAMAtD,EAAA,GAAA6E,IACE/D,KAAAA,WACAe,YAAAA,EAAa,GAAAgD,IACbxB,YAAAA,qCACAJ,SAAK,EAJPQ,MA5kBN,IAinBQC,KAAM,IAjnBdC,OAAA,EAqkBU3D,eArkBV,UAolBIU,gBAAA,KAiCIR,SAAU,KA9BdQ,OAAAA,wCAvlBJuC,MAAA,GA0lBQI,CACAC,cAAUtD,EAAU6E,IACpBtB,SAAMvD,EAAA,GAHR6E,IAIErB,KAAAA,WACA3B,YAAAA,EAAa,GAAAgD,IACbQ,YAAQ,+BACR5B,SAAK,EACLC,MAAAA,GACAC,KAAAA,IACAE,UAAAA,OACAE,gBAAAA,KACA7D,SAAAA,KACA0C,OAAAA,wCACAK,MAAAA,GAGAI,CACAC,cAAUtD,EAAU6E,IACpBtB,SAAMvD,EAAA,GAHR6E,IAIErB,KAAAA,kBACA3B,YAAAA,uCACAwD,SAAAA,EACA5B,MAAAA,IACAC,KAAAA,GACAC,YAAO,QACPC,gBAAAA,KACAG,SAAAA,KACA7D,OAAAA,wCACA0C,MAAAA,GAbF,CAiBES,cAAAA,EAAetD,IACfuD,SAAAA,EAAUtD,GAAM6E,IAChBtB,KAAAA,aACAC,YAAAA,4CACA3B,SAAAA,EACAwD,gBANF,IAOE5B,SAAK,IACLC,MAAAA,GAEAK,CACA7D,cAAUH,EAXZ8E,IAYEjC,SAAM5C,EAAE,GAAA6E,IACR5B,KAAAA,QAbFpB,YAeA,uCACEwB,SAAAA,EACAC,gBAAUtD,KACVuD,SAAM,KACN1B,MAAAA,MA5oBR,KAAA,GAAA,OA0jBMc,EA1jBNpC,EAAAkE,KAgpBQX,QAAAA,IAAAA,KAAAA,OAAAA,EAAaa,OAAbb,iCAGAlB,EAAQ3C,EAAAqF,OAAA,SAAAC,EAAAC,GAAA,OAAAD,EAAAC,EAXVtF,UAAA,GAAAE,EAcAF,GAFE+C,EAAO,IAAA/C,GAppBfK,EAAAE,KAAA,IAAAJ,mBAAAO,MAwpBQ0C,EAAQmC,UACRlC,CAAAA,IAAAA,EAAMsB,KACNhD,CACAwD,SAAAA,EACAtB,UAAAA,EACA7D,MAAAA,KA7pBR,KAAA,IAkqBQoD,QAAAA,IAAAA,wCAEAzB,QAAAA,IAAAA,gDACAwD,QAAAA,IAAAA,iBACAtB,QAAAA,IAAAA,eAAAA,OAAiBvE,EANnBmF,SAOEzE,QAAAA,IAAAA,kBAAAA,OAPFT,EAAAkF,SAQE1B,QAAAA,IAAAA,wBAAAA,OAAOvD,EAAAiF,SARTjE,QAxEkBC,IAwElB,iBAAAqE,OAhqBNrF,EAAAgF,SAosBIjE,QAAQC,IAAR,gBAAAqE,OAA4BpF,EAAU+E,SApsB1CjE,QAAAC,IAAA,mBAAAqE,OAAAnF,EAAA8E,SAwlBU1E,QAAAA,IAAAA,eAAAA,OAxlBVH,EAAA6E,SA4qBIjE,QAAAA,IAAAA,aAAAA,OAAAV,EAAA2E,SA4BAjE,QAAQC,IAAR,0BAAAqE,OAAsC/E,EAAM0E,SAzBtCzE,QAAAA,IAAAA,gCAAwBQ,QAAAC,IAAA,sCAAAD,QAAbC,IA/qBrB,4CAAAJ,EAAAE,KAAA,IAAA,MAAA,KAAA,IAAAF,EAAAC,KAAA,IAAAD,EAAAmF,GAAAnF,EAAA,MAAA,GAirBUH,QAAAA,MAAQF,WAARE,EAAAA,IAjrBV,KAAA,IAAA,OAAAG,EAAAC,KAAA,IAAAD,EAAAE,KAAA,IAAAJ,mBAAAO,MAorBQiE,SAAK9E,cAprBb,KAAA,IAAA,OAorBMW,QADIC,IAEJ,uBArrBNJ,EAAAoF,OAAA,KAAA,KAAA,IAAA,IAAA,MAAA,OAAApF,EAAAqF,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,IAAA,IAAA,OAstBA1H","file":"seed-completo-real.min.js","sourcesContent":["const mongoose = require(\"mongoose\")\nconst bcrypt = require(\"bcryptjs\")\n\n// Conectar a MongoDB\nconst MONGODB_URI = process.env.MONGODB_URI || \"mongodb://localhost:27017/cotizacion\"\n\nasync function seedDatabase() {\n  try {\n    console.log(\"🔗 Conectando a MongoDB...\")\n    await mongoose.connect(MONGODB_URI)\n    console.log(\"✅ Conectado a MongoDB\")\n\n    // Definir esquemas\n    const proveedorSchema = new mongoose.Schema(\n      {\n        nombre: String,\n        contacto: String,\n        telefono: String,\n        email: String,\n        direccion: String,\n        ciudad: String,\n        pais: String,\n        tipoMateriales: [String],\n        descuentoGeneral: Number,\n        estado: Boolean,\n      },\n      { timestamps: true },\n    )\n\n    const tipoProductoSchema = new mongoose.Schema(\n      {\n        nombre: String,\n        descripcion: String,\n        categoria: String,\n        mano_obra_fabricacion: Number,\n        mano_obra_instalacion: Number,\n        estado: Boolean,\n      },\n      { timestamps: true },\n    )\n\n    const materialSchema = new mongoose.Schema(\n      {\n        nombre: String,\n        descripcion: String,\n        categoria: String,\n        unidad: String,\n        costo: Number,\n        stock: Number,\n        stockMinimo: Number,\n        proveedor_id: mongoose.Schema.Types.ObjectId,\n        contribuyeMalla: Boolean,\n        estado: Boolean,\n        variantes: [\n          {\n            tipo: String,\n            nombre: String,\n            costo_adicional: Number,\n          },\n        ],\n      },\n      { timestamps: true },\n    )\n\n    const productoSchema = new mongoose.Schema(\n      {\n        nombre: String,\n        codigo: String,\n        identificador: String,\n        descripcion: String,\n        tipo_producto_id: mongoose.Schema.Types.ObjectId,\n        user_id: mongoose.Schema.Types.ObjectId,\n        imagen: String,\n        svg: String,\n        proveedor_id: mongoose.Schema.Types.ObjectId,\n        margen_ganancia: Number,\n        estado: Boolean,\n        materiales: [\n          {\n            material_id: mongoose.Schema.Types.ObjectId,\n            formula: String,\n          },\n        ],\n      },\n      { timestamps: true },\n    )\n\n    const clienteSchema = new mongoose.Schema(\n      {\n        nombre: String,\n        email: String,\n        telefono: String,\n        direccion: String,\n        ciudad: String,\n        estado: Boolean,\n      },\n      { timestamps: true },\n    )\n\n    const grupoSchema = new mongoose.Schema(\n      {\n        nombre: String,\n        descripcion: String,\n        cotizacion_id: mongoose.Schema.Types.ObjectId,\n        orden: Number,\n      },\n      { timestamps: true },\n    )\n\n    const cotizacionSchema = new mongoose.Schema(\n      {\n        numero: String,\n        cliente_id: mongoose.Schema.Types.ObjectId,\n        user_id: mongoose.Schema.Types.ObjectId,\n        subtotal: Number,\n        impuestos: Number,\n        total: Number,\n        estado: String,\n        fecha_vencimiento: Date,\n        notas: String,\n      },\n      { timestamps: true },\n    )\n\n    const cotizacionItemSchema = new mongoose.Schema(\n      {\n        cotizacion_id: mongoose.Schema.Types.ObjectId,\n        grupo_id: mongoose.Schema.Types.ObjectId,\n        tipo: String, // producto, vidrio_templado, reparacion, libre\n        producto_id: mongoose.Schema.Types.ObjectId,\n        descripcion: String,\n        cantidad: Number,\n        ancho: Number,\n        alto: Number,\n        malla: Boolean,\n        color_aluminio: String,\n        color_pvc: String,\n        tipo_vidrio: String,\n        precio_unitario: Number,\n        subtotal: Number,\n        imagen: String,\n        orden: Number,\n      },\n      { timestamps: true },\n    )\n\n    const reparacionSchema = new mongoose.Schema(\n      {\n        nombre: String,\n        descripcion: String,\n        categoria: String,\n        precio_base: Number,\n        tiempo_estimado: Number,\n        estado: Boolean,\n      },\n      { timestamps: true },\n    )\n\n    const userSchema = new mongoose.Schema(\n      {\n        name: String,\n        email: String,\n        password: String,\n        role: String,\n        isActive: Boolean,\n      },\n      { timestamps: true },\n    )\n\n    // Crear modelos\n    const Proveedor = mongoose.models.Proveedor || mongoose.model(\"Proveedor\", proveedorSchema)\n    const TipoProducto = mongoose.models.TipoProducto || mongoose.model(\"TipoProducto\", tipoProductoSchema)\n    const Material = mongoose.models.Material || mongoose.model(\"Material\", materialSchema)\n    const Producto = mongoose.models.Producto || mongoose.model(\"Producto\", productoSchema)\n    const Cliente = mongoose.models.Cliente || mongoose.model(\"Cliente\", clienteSchema)\n    const Grupo = mongoose.models.Grupo || mongoose.model(\"Grupo\", grupoSchema)\n    const Cotizacion = mongoose.models.Cotizacion || mongoose.model(\"Cotizacion\", cotizacionSchema)\n    const CotizacionItem = mongoose.models.CotizacionItem || mongoose.model(\"CotizacionItem\", cotizacionItemSchema)\n    const Reparacion = mongoose.models.Reparacion || mongoose.model(\"Reparacion\", reparacionSchema)\n    const User = mongoose.models.User || mongoose.model(\"User\", userSchema)\n\n    // Limpiar datos existentes\n    console.log(\"🧹 Limpiando datos existentes...\")\n    await Proveedor.deleteMany({})\n    await TipoProducto.deleteMany({})\n    await Material.deleteMany({})\n    await Producto.deleteMany({})\n    await Cliente.deleteMany({})\n    await Grupo.deleteMany({})\n    await Cotizacion.deleteMany({})\n    await CotizacionItem.deleteMany({})\n    await Reparacion.deleteMany({})\n    await User.deleteMany({})\n\n    // Crear usuarios\n    console.log(\"👤 Creando usuarios...\")\n    const hashedPassword = await bcrypt.hash(\"password\", 10)\n\n    const users = await User.insertMany([\n      {\n        name: \"Administrador\",\n        email: \"admin@test.com\",\n        password: hashedPassword,\n        role: \"admin\",\n        isActive: true,\n      },\n      {\n        name: \"Vendedor\",\n        email: \"vendedor@test.com\",\n        password: hashedPassword,\n        role: \"vendedor\",\n        isActive: true,\n      },\n    ])\n\n    console.log(`✅ ${users.length} usuarios creados`)\n\n    // Crear proveedores\n    console.log(\"🏢 Creando proveedores...\")\n    const proveedores = await Proveedor.insertMany([\n      {\n        nombre: \"Naufar\",\n        contacto: \"Juan Pérez\",\n        telefono: \"555-0001\",\n        email: \"contacto@naufar.com\",\n        direccion: \"Av. Industrial 123\",\n        ciudad: \"Guadalajara\",\n        pais: \"México\",\n        tipoMateriales: [\"aluminio\", \"vidrio\"],\n        descuentoGeneral: 5,\n        estado: true,\n      },\n      {\n        nombre: \"Vitro\",\n        contacto: \"María García\",\n        telefono: \"555-0002\",\n        email: \"ventas@vitro.com\",\n        direccion: \"Blvd. Cristal 456\",\n        ciudad: \"Monterrey\",\n        pais: \"México\",\n        tipoMateriales: [\"vidrio\", \"cristal\"],\n        descuentoGeneral: 3,\n        estado: true,\n      },\n      {\n        nombre: \"Herrajes SA\",\n        contacto: \"Carlos Rodríguez\",\n        telefono: \"555-0003\",\n        email: \"info@herrajessa.com\",\n        direccion: \"Calle Industria 789\",\n        ciudad: \"Ciudad de México\",\n        pais: \"México\",\n        tipoMateriales: [\"herrajes\", \"accesorios\"],\n        descuentoGeneral: 8,\n        estado: true,\n      },\n    ])\n\n    console.log(`✅ ${proveedores.length} proveedores creados`)\n\n    // Crear tipos de producto\n    console.log(\"📦 Creando tipos de producto...\")\n    const tiposProducto = await TipoProducto.insertMany([\n      {\n        nombre: \"Ventana PVC\",\n        descripcion: \"Ventanas de PVC con diferentes configuraciones\",\n        categoria: \"ventanas\",\n        mano_obra_fabricacion: 150,\n        mano_obra_instalacion: 200,\n        estado: true,\n      },\n      {\n        nombre: \"Ventana Aluminio\",\n        descripcion: \"Ventanas de aluminio con diferentes configuraciones\",\n        categoria: \"ventanas\",\n        mano_obra_fabricacion: 180,\n        mano_obra_instalacion: 220,\n        estado: true,\n      },\n      {\n        nombre: \"Puerta PVC\",\n        descripcion: \"Puertas de PVC con diferentes configuraciones\",\n        categoria: \"puertas\",\n        mano_obra_fabricacion: 200,\n        mano_obra_instalacion: 300,\n        estado: true,\n      },\n      {\n        nombre: \"Vidrio Templado\",\n        descripcion: \"Trabajos con vidrio templado como barandales y divisiones\",\n        categoria: \"vidrios_templados\",\n        mano_obra_fabricacion: 250,\n        mano_obra_instalacion: 350,\n        estado: true,\n      },\n    ])\n\n    console.log(`✅ ${tiposProducto.length} tipos de producto creados`)\n\n    // Crear materiales\n    console.log(\"🔧 Creando materiales...\")\n    const materiales = await Material.insertMany([\n      {\n        nombre: \"Perfil PVC Ventana\",\n        descripcion: \"Perfil principal para ventanas de PVC\",\n        categoria: \"PVC\",\n        unidad: \"ml\",\n        costo: 45.5,\n        stock: 1000,\n        stockMinimo: 100,\n        proveedor_id: proveedores[0]._id,\n        contribuyeMalla: false,\n        estado: true,\n        variantes: [\n          { tipo: \"color_pvc\", nombre: \"Blanco\", costo_adicional: 0 },\n          { tipo: \"color_pvc\", nombre: \"Café\", costo_adicional: 5 },\n          { tipo: \"color_pvc\", nombre: \"Negro\", costo_adicional: 8 },\n        ],\n      },\n      {\n        nombre: \"Perfil Aluminio Ventana\",\n        descripcion: \"Perfil principal para ventanas de aluminio\",\n        categoria: \"Aluminio\",\n        unidad: \"ml\",\n        costo: 65.0,\n        stock: 800,\n        stockMinimo: 80,\n        proveedor_id: proveedores[1]._id,\n        contribuyeMalla: false,\n        estado: true,\n        variantes: [\n          { tipo: \"color_aluminio\", nombre: \"Natural\", costo_adicional: 0 },\n          { tipo: \"color_aluminio\", nombre: \"Bronce\", costo_adicional: 12 },\n          { tipo: \"color_aluminio\", nombre: \"Negro\", costo_adicional: 15 },\n        ],\n      },\n      {\n        nombre: \"Vidrio Claro 6mm\",\n        descripcion: \"Vidrio transparente de 6mm de espesor\",\n        categoria: \"Vidrio\",\n        unidad: \"m2\",\n        costo: 180.0,\n        stock: 500,\n        stockMinimo: 50,\n        proveedor_id: proveedores[1]._id,\n        contribuyeMalla: false,\n        estado: true,\n        variantes: [\n          { tipo: \"tipo_vidrio\", nombre: \"Claro\", costo_adicional: 0 },\n          { tipo: \"tipo_vidrio\", nombre: \"Bronce\", costo_adicional: 25 },\n          { tipo: \"tipo_vidrio\", nombre: \"Azul\", costo_adicional: 30 },\n        ],\n      },\n      {\n        nombre: \"Vidrio Templado 10mm\",\n        descripcion: \"Vidrio templado de 10mm para barandales\",\n        categoria: \"Vidrio Templado\",\n        unidad: \"m2\",\n        costo: 650.0,\n        stock: 200,\n        stockMinimo: 20,\n        proveedor_id: proveedores[1]._id,\n        contribuyeMalla: false,\n        estado: true,\n        variantes: [\n          { tipo: \"tipo_vidrio\", nombre: \"Claro\", costo_adicional: 0 },\n          { tipo: \"tipo_vidrio\", nombre: \"Esmerilado\", costo_adicional: 120 },\n          { tipo: \"tipo_vidrio\", nombre: \"Satinado\", costo_adicional: 150 },\n        ],\n      },\n      {\n        nombre: \"Herraje para Barandal\",\n        descripcion: \"Kit de herrajes para barandal de vidrio templado\",\n        categoria: \"Herrajes\",\n        unidad: \"juego\",\n        costo: 850.0,\n        stock: 50,\n        stockMinimo: 5,\n        proveedor_id: proveedores[2]._id,\n        contribuyeMalla: false,\n        estado: true,\n        variantes: [\n          { tipo: \"otro\", nombre: \"Acero Inoxidable\", costo_adicional: 0 },\n          { tipo: \"otro\", nombre: \"Cromado\", costo_adicional: 200 },\n        ],\n      },\n      {\n        nombre: \"Malla Mosquitera\",\n        descripcion: \"Malla para mosquiteros\",\n        categoria: \"Accesorios\",\n        unidad: \"m2\",\n        costo: 25.0,\n        stock: 200,\n        stockMinimo: 20,\n        proveedor_id: proveedores[2]._id,\n        contribuyeMalla: true,\n        estado: true,\n        variantes: [\n          { tipo: \"otro\", nombre: \"Estándar\", costo_adicional: 0 },\n          { tipo: \"otro\", nombre: \"Reforzada\", costo_adicional: 8 },\n        ],\n      },\n    ])\n\n    console.log(`✅ ${materiales.length} materiales creados`)\n\n    // Crear productos\n    console.log(\"🏗️ Creando productos...\")\n    const productos = await Producto.insertMany([\n      {\n        nombre: \"Ventana PVC 2 Hojas\",\n        codigo: \"PROD-001\",\n        identificador: \"VEN-PVC-2H\",\n        descripcion: \"Ventana de PVC con 2 hojas corredizas\",\n        tipo_producto_id: tiposProducto[0]._id,\n        user_id: users[0]._id,\n        imagen: \"/placeholder.svg?height=200&width=200\",\n        svg: '<rect width=\"100\" height=\"60\" fill=\"#e5e7eb\" stroke=\"#374151\" stroke-width=\"2\"/>',\n        proveedor_id: proveedores[0]._id,\n        margen_ganancia: 35,\n        estado: true,\n        materiales: [\n          {\n            material_id: materiales[0]._id,\n            formula: \"REDONDEAR.MENOS((ancho + alto) * 2 / 100, 0) * 100\",\n          },\n          {\n            material_id: materiales[2]._id,\n            formula: \"REDONDEAR.MENOS(ancho * alto / 10000, 2)\",\n          },\n          {\n            material_id: materiales[5]._id,\n            formula: \"SI(malla = 1, REDONDEAR.MENOS(ancho * alto / 10000, 2), 0)\",\n          },\n        ],\n      },\n      {\n        nombre: \"Ventana Aluminio 3 Hojas\",\n        codigo: \"PROD-002\",\n        identificador: \"VEN-ALU-3H\",\n        descripcion: \"Ventana de aluminio con 3 hojas corredizas\",\n        tipo_producto_id: tiposProducto[1]._id,\n        user_id: users[0]._id,\n        imagen: \"/placeholder.svg?height=200&width=200\",\n        svg: '<rect width=\"120\" height=\"60\" fill=\"#d1d5db\" stroke=\"#374151\" stroke-width=\"2\"/>',\n        proveedor_id: proveedores[1]._id,\n        margen_ganancia: 40,\n        estado: true,\n        materiales: [\n          {\n            material_id: materiales[1]._id,\n            formula: \"REDONDEAR.MENOS((ancho + alto) * 2.5 / 100, 0) * 100\",\n          },\n          {\n            material_id: materiales[2]._id,\n            formula: \"REDONDEAR.MENOS(ancho * alto / 10000, 2)\",\n          },\n        ],\n      },\n      {\n        nombre: \"Puerta PVC Sencilla\",\n        codigo: \"PROD-003\",\n        identificador: \"PTA-PVC-S\",\n        descripcion: \"Puerta de PVC sencilla con vidrio\",\n        tipo_producto_id: tiposProducto[2]._id,\n        user_id: users[0]._id,\n        imagen: \"/placeholder.svg?height=200&width=200\",\n        svg: '<rect width=\"80\" height=\"200\" fill=\"#f3f4f6\" stroke=\"#374151\" stroke-width=\"2\"/>',\n        proveedor_id: proveedores[0]._id,\n        margen_ganancia: 45,\n        estado: true,\n        materiales: [\n          {\n            material_id: materiales[0]._id,\n            formula: \"REDONDEAR.MENOS((ancho + alto) * 2.2 / 100, 0) * 100\",\n          },\n          {\n            material_id: materiales[2]._id,\n            formula: \"REDONDEAR.MENOS(ancho * alto * 0.6 / 10000, 2)\",\n          },\n        ],\n      },\n      {\n        nombre: \"Barandal Vidrio Templado\",\n        codigo: \"PROD-004\",\n        identificador: \"BAR-VT\",\n        descripcion: \"Barandal de vidrio templado con herrajes\",\n        tipo_producto_id: tiposProducto[3]._id,\n        user_id: users[0]._id,\n        imagen: \"/placeholder.svg?height=200&width=200\",\n        svg: '<rect width=\"150\" height=\"40\" fill=\"#d1fae5\" stroke=\"#374151\" stroke-width=\"2\"/>',\n        proveedor_id: proveedores[1]._id,\n        margen_ganancia: 50,\n        estado: true,\n        materiales: [\n          {\n            material_id: materiales[3]._id,\n            formula: \"REDONDEAR.MENOS(ancho * alto / 10000, 2)\",\n          },\n          {\n            material_id: materiales[4]._id,\n            formula: \"REDONDEAR.MENOS(ancho / 100, 0) + 1\",\n          },\n        ],\n      },\n    ])\n\n    console.log(`✅ ${productos.length} productos creados`)\n\n    // Crear reparaciones\n    console.log(\"🔨 Creando reparaciones...\")\n    const reparaciones = await Reparacion.insertMany([\n      {\n        nombre: \"Cambio de Vidrio\",\n        descripcion: \"Cambio de vidrio roto en ventana existente\",\n        categoria: \"Reparación Vidrios\",\n        precio_base: 350,\n        tiempo_estimado: 2,\n        estado: true,\n      },\n      {\n        nombre: \"Ajuste de Herrajes\",\n        descripcion: \"Ajuste y lubricación de herrajes en ventanas o puertas\",\n        categoria: \"Reparación Herrajes\",\n        precio_base: 180,\n        tiempo_estimado: 1,\n        estado: true,\n      },\n      {\n        nombre: \"Sellado de Filtraciones\",\n        descripcion: \"Sellado de filtraciones de agua en ventanas o puertas\",\n        categoria: \"Impermeabilización\",\n        precio_base: 250,\n        tiempo_estimado: 1.5,\n        estado: true,\n      },\n    ])\n\n    console.log(`✅ ${reparaciones.length} reparaciones creadas`)\n\n    // Crear clientes\n    console.log(\"👥 Creando clientes...\")\n    const clientes = await Cliente.insertMany([\n      {\n        nombre: \"Juan Pérez\",\n        email: \"juan@example.com\",\n        telefono: \"555-1234\",\n        direccion: \"Calle Principal 123\",\n        ciudad: \"Ciudad de México\",\n        estado: true,\n      },\n      {\n        nombre: \"Constructora Moderna SA\",\n        email: \"contacto@constructoramoderna.com\",\n        telefono: \"555-5678\",\n        direccion: \"Av. Reforma 456\",\n        ciudad: \"Guadalajara\",\n        estado: true,\n      },\n      {\n        nombre: \"María González\",\n        email: \"maria@example.com\",\n        telefono: \"555-9012\",\n        direccion: \"Blvd. Las Palmas 789\",\n        ciudad: \"Monterrey\",\n        estado: true,\n      },\n    ])\n\n    console.log(`✅ ${clientes.length} clientes creados`)\n\n    // Crear cotización de ejemplo\n    console.log(\"📝 Creando cotización de ejemplo...\")\n    const cotizacion = await Cotizacion.create({\n      numero: \"COT-2024-001\",\n      cliente_id: clientes[0]._id,\n      user_id: users[1]._id,\n      subtotal: 0,\n      impuestos: 0,\n      total: 0,\n      estado: \"borrador\",\n      fecha_vencimiento: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      notas: \"Cotización de ejemplo con múltiples productos y grupos\",\n    })\n\n    // Crear grupos\n    console.log(\"📋 Creando grupos...\")\n    const grupos = await Grupo.insertMany([\n      {\n        nombre: \"Fachada Principal\",\n        descripcion: \"Elementos para la fachada principal\",\n        cotizacion_id: cotizacion._id,\n        orden: 1,\n      },\n      {\n        nombre: \"Interior Planta Baja\",\n        descripcion: \"Elementos para el interior de la planta baja\",\n        cotizacion_id: cotizacion._id,\n        orden: 2,\n      },\n    ])\n\n    console.log(`✅ ${grupos.length} grupos creados`)\n\n    // Crear items de cotización\n    console.log(\"📊 Creando items de cotización...\")\n    const items = await CotizacionItem.insertMany([\n      {\n        cotizacion_id: cotizacion._id,\n        grupo_id: grupos[0]._id,\n        tipo: \"producto\",\n        producto_id: productos[0]._id,\n        descripcion: \"Ventana PVC 2 Hojas 120x100cm\",\n        cantidad: 2,\n        ancho: 120,\n        alto: 100,\n        malla: true,\n        color_pvc: \"Blanco\",\n        precio_unitario: 3500,\n        subtotal: 7000,\n        imagen: \"/placeholder.svg?height=200&width=200\",\n        orden: 1,\n      },\n      {\n        cotizacion_id: cotizacion._id,\n        grupo_id: grupos[0]._id,\n        tipo: \"producto\",\n        producto_id: productos[1]._id,\n        descripcion: \"Ventana Aluminio 3 Hojas 180x120cm\",\n        cantidad: 1,\n        ancho: 180,\n        alto: 120,\n        malla: false,\n        color_aluminio: \"Natural\",\n        precio_unitario: 4800,\n        subtotal: 4800,\n        imagen: \"/placeholder.svg?height=200&width=200\",\n        orden: 2,\n      },\n      {\n        cotizacion_id: cotizacion._id,\n        grupo_id: grupos[1]._id,\n        tipo: \"producto\",\n        producto_id: productos[2]._id,\n        descripcion: \"Puerta PVC Sencilla 90x210cm\",\n        cantidad: 1,\n        ancho: 90,\n        alto: 210,\n        color_pvc: \"Café\",\n        precio_unitario: 6200,\n        subtotal: 6200,\n        imagen: \"/placeholder.svg?height=200&width=200\",\n        orden: 1,\n      },\n      {\n        cotizacion_id: cotizacion._id,\n        grupo_id: grupos[1]._id,\n        tipo: \"vidrio_templado\",\n        descripcion: \"Barandal de Vidrio Templado 250x90cm\",\n        cantidad: 1,\n        ancho: 250,\n        alto: 90,\n        tipo_vidrio: \"Claro\",\n        precio_unitario: 8500,\n        subtotal: 8500,\n        imagen: \"/placeholder.svg?height=200&width=200\",\n        orden: 2,\n      },\n      {\n        cotizacion_id: cotizacion._id,\n        grupo_id: grupos[1]._id,\n        tipo: \"reparacion\",\n        descripcion: \"Ajuste de Herrajes en ventanas existentes\",\n        cantidad: 3,\n        precio_unitario: 180,\n        subtotal: 540,\n        orden: 3,\n      },\n      {\n        cotizacion_id: cotizacion._id,\n        grupo_id: grupos[0]._id,\n        tipo: \"libre\",\n        descripcion: \"Instalación y materiales adicionales\",\n        cantidad: 1,\n        precio_unitario: 1200,\n        subtotal: 1200,\n        orden: 3,\n      },\n    ])\n\n    console.log(`✅ ${items.length} items de cotización creados`)\n\n    // Actualizar totales de la cotización\n    const subtotal = items.reduce((sum, item) => sum + item.subtotal, 0)\n    const impuestos = subtotal * 0.16\n    const total = subtotal + impuestos\n\n    await Cotizacion.updateOne(\n      { _id: cotizacion._id },\n      {\n        subtotal: subtotal,\n        impuestos: impuestos,\n        total: total,\n      },\n    )\n\n    console.log(\"✅ Totales de cotización actualizados\")\n\n    console.log(\"\\n🎉 ¡Datos de ejemplo creados exitosamente!\")\n    console.log(\"\\n📊 Resumen:\")\n    console.log(`- Usuarios: ${users.length}`)\n    console.log(`- Proveedores: ${proveedores.length}`)\n    console.log(`- Tipos de Producto: ${tiposProducto.length}`)\n    console.log(`- Materiales: ${materiales.length}`)\n    console.log(`- Productos: ${productos.length}`)\n    console.log(`- Reparaciones: ${reparaciones.length}`)\n    console.log(`- Clientes: ${clientes.length}`)\n    console.log(`- Grupos: ${grupos.length}`)\n    console.log(`- Items de Cotización: ${items.length}`)\n    console.log(\"\\n🔑 Credenciales de acceso:\")\n    console.log(\"- Admin: admin@test.com / password\")\n    console.log(\"- Vendedor: vendedor@test.com / password\")\n  } catch (error) {\n    console.error(\"❌ Error:\", error)\n  } finally {\n    // Cerrar conexión\n    await mongoose.disconnect()\n    console.log(\"🔌 Conexión cerrada\")\n  }\n}\n\n// Ejecutar la función\nseedDatabase()\n"]}